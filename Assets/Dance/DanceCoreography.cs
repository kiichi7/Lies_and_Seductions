/**********************************************************************
 *
 * CLASS 
 *
 * Copyright 2008 Tommi Horttana, Petri Lankoski, Jari Suominen
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License 
 * at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
 * by applicable law or agreed to in writing, software distributed 
 * under the License is distributed on an "AS IS" BASIS, WITHOUT 
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 *
 ***********************************************************************/
public class DanceCoreography {

	/* List to define coreography, i.e., what keys should be pressed
	 * when a BeatMarker hits press area
	 * columns corresponds to keys (from left to right:
	 * LEFT, DOWN, RIGHT, UP
	 * The left length coreography is 90 second (1.5 minutes).
	 */
	public static int[] NORMAL = new int[] {
		0, 1, 0, 0,
		1, 0, 0, 0,  
		0, 1, 0, 0,
		0, 0, 1, 0,  
		0, 1, 0, 0,
		1, 0, 0, 0,  
		0, 0, 1, 0,
		0, 1, 0, 0,  
		1, 0, 0, 0,
		1, 0, 1, 0,  // 5 sec
		0, 1, 0, 0,
		0, 1, 0, 0,  
		1, 0, 1, 0,
		0, 1, 1, 0,  
		1, 1, 0, 0,
		1, 0, 0, 0,  
		0, 1, 0, 0,
		0, 0, 1, 0,  
		0, 0, 1, 0,
		0, 1, 0, 0,  // 10 sec
		0, 1, 0, 0,
		1, 0, 1, 0,  
		0, 1, 0, 0,
		1, 0, 1, 0,  
		0, 1, 0, 0,
		1, 1, 0, 0,  
		0, 1, 1, 0,
		0, 1, 0, 0,  
		1, 0, 0, 0,
		0, 1, 0, 0,  // 15 sec
		0, 1, 0, 0,
		1, 0, 1, 0,  
		0, 0, 0, 1,
		1, 0, 1, 0,  
		0, 1, 0, 0,
		1, 0, 1, 0,  
		0, 0, 0, 1,
		1, 0, 1, 0,  
		0, 1, 0, 0,
		0, 1, 0, 0,  // 20 sec
		0, 0, 0, 1,
		1, 0, 0, 0,  
		0, 0, 0, 1,
		0, 1, 1, 0,  
		1, 1, 0, 0,
		1, 0, 0, 0,  
		0, 0, 1, 0,
		0, 1, 1, 0,  
		1, 0, 0, 0,
		1, 0, 0, 0,  // 25 sec
		0, 1, 0, 0,
		0, 1, 0, 0,  
		0, 0, 1, 0,
		0, 0, 1, 0,  
		0, 1, 0, 0,
		1, 0, 0, 0,  
		0, 1, 0, 0,
		1, 0, 1, 0,  
		0, 1, 0, 0,
		0, 0, 0, 1,  // 30 sec
		0, 1, 0, 0,
		1, 0, 0, 0,  
		0, 1, 0, 0,
		0, 0, 1, 0,  
		0, 1, 0, 0,
		1, 0, 0, 0,  
		0, 0, 1, 0,
		0, 1, 0, 0,  
		1, 0, 0, 0,
		1, 0, 0, 0,  // 35 sec
		0, 1, 0, 0,
		0, 1, 0, 0,  
		0, 0, 1, 0,
		0, 0, 1, 0,  
		0, 1, 0, 0,
		1, 0, 0, 0,  
		0, 1, 0, 0,
		0, 0, 1, 0,  
		0, 0, 1, 0,
		0, 1, 0, 0,  // 40 sec
		0, 1, 0, 0,
		1, 0, 1, 0,  
		0, 1, 1, 0,
		0, 0, 1, 0,  
		1, 1, 0, 0,
		1, 0, 0, 0,  
		0, 1, 1, 0,
		0, 1, 0, 0,  
		1, 0, 0, 0,
		1, 0, 0, 0,  // 45 sec
		0, 1, 0, 0,
		0, 1, 0, 0,  
		0, 0, 1, 0,
		0, 0, 1, 0,  
		0, 1, 0, 0,
		1, 0, 0, 0,  
		0, 1, 0, 0,
		0, 0, 1, 0,  
		0, 0, 0, 1,
		0, 0, 0, 1,  // 50 sec
		0, 1, 0, 0,
		1, 0, 0, 0,  
		0, 1, 0, 0,
		0, 0, 1, 0,  
		0, 1, 0, 0,
		1, 0, 0, 0,  
		0, 0, 1, 0,
		0, 1, 0, 0,  
		1, 0, 0, 0,
		1, 0, 0, 0,  // 55 sec
		0, 1, 0, 0,
		0, 1, 0, 0,  
		1, 0, 1, 0,
		0, 0, 1, 0,  
		0, 1, 0, 0,  // 60
		0, 0, 0, 1,  
		0, 1, 0, 0,
		1, 0, 1, 0,  
		1, 0, 1, 0,
		0, 1, 0, 0,
		1, 0, 0, 0,  
		0, 1, 0, 0,
		0, 0, 1, 0,  
		0, 1, 0, 0,
		1, 0, 0, 0,  // 70
		0, 0, 1, 0,
		0, 1, 0, 0,  
		1, 0, 0, 0,
		1, 0, 1, 0,  
		0, 1, 0, 0,
		0, 1, 0, 0,  
		1, 0, 1, 0,
		0, 1, 1, 0,  
		1, 1, 0, 0,  // 80
		1, 0, 0, 0,  
		0, 1, 0, 0,
		0, 0, 1, 0,  
		0, 0, 1, 0,
		0, 1, 0, 0,  
		0, 1, 0, 0,
		1, 0, 1, 0,  
		0, 1, 0, 0,
		1, 0, 1, 0,  
		0, 1, 0, 0, // 90
		/*1, 1, 0, 0,  
		0, 1, 1, 0,
		0, 1, 0, 0,  
		1, 0, 0, 0,
		0, 1, 0, 0,  // 15 sec
		0, 1, 0, 0,
		1, 0, 1, 0,  
		0, 0, 0, 1,
		1, 0, 1, 0,  
		0, 1, 0, 0,
		1, 0, 1, 0,  
		0, 0, 0, 1,
		1, 0, 1, 0,  
		0, 1, 0, 0,
		0, 1, 0, 0,  // 20 sec
		0, 0, 0, 1,
		1, 0, 0, 0,  
		0, 0, 0, 1,
		0, 1, 1, 0,  
		1, 1, 0, 0,
		1, 0, 0, 0,  
		0, 0, 1, 0,
		0, 1, 1, 0,  
		1, 0, 0, 0,
		1, 0, 0, 0,  // 25 sec
		0, 1, 0, 0,
		0, 1, 0, 0,  
		0, 0, 1, 0,
		0, 0, 1, 0,  
		0, 1, 0, 0,
		1, 0, 0, 0,  
		0, 1, 0, 0,
		1, 0, 1, 0,  
		0, 1, 0, 0,
		0, 0, 0, 1,  // 30 sec
		0, 1, 0, 0,
		1, 0, 0, 0,  
		0, 1, 0, 0,
		0, 0, 1, 0,  
		0, 1, 0, 0,
		1, 0, 0, 0,  
		0, 0, 1, 0,
		0, 1, 0, 0,  
		1, 0, 0, 0,
		1, 0, 0, 0,  // 35 sec
		0, 1, 0, 0,
		0, 1, 0, 0,  
		0, 0, 1, 0,
		0, 0, 1, 0,  
		0, 1, 0, 0,
		1, 0, 0, 0,  
		0, 1, 0, 0,
		0, 0, 1, 0,  
		0, 0, 1, 0,
		0, 1, 0, 0,  // 40 sec
		0, 1, 0, 0,
		1, 0, 1, 0,  
		0, 1, 1, 0,
		0, 0, 1, 0,  
		1, 1, 0, 0,
		1, 0, 0, 0,  
		0, 1, 1, 0,
		0, 1, 0, 0,  
		1, 0, 0, 0,
		1, 0, 0, 0,  // 45 sec
		0, 1, 0, 0,
		0, 1, 0, 0,  
		0, 0, 1, 0,
		0, 0, 1, 0,  
		0, 1, 0, 0,
		1, 0, 0, 0,  
		0, 1, 0, 0,
		0, 0, 1, 0,  
		0, 0, 0, 1,
		0, 0, 0, 1,  // 50 sec
		0, 1, 0, 0,
		1, 0, 0, 0,  
		0, 1, 0, 0,
		0, 0, 1, 0,  
		0, 1, 0, 0,
		1, 0, 0, 0,  
		0, 0, 1, 0,
		0, 1, 0, 0,  
		1, 0, 0, 0,
		1, 0, 0, 0,  // 55 sec
		0, 1, 0, 0,
		0, 1, 0, 0,  
		1, 0, 1, 0,
		0, 0, 1, 0,  
		0, 1, 0, 0,
		0, 0, 0, 1,  
		0, 1, 0, 0,
		1, 0, 1, 0,  
		1, 0, 1, 0,*/ 
		};
	
	// Hot mode game, 30 seconds coregography
	// Note that hot mode is in double speed!!!
	// Keep in mind:
	// zero lines on 1. and 3. beats of 4 beat loops are difficult to the player.
	// zero lines on 2. and 4. beats of 4 beat loops are easier.
	public static int[] HOT = new int[] {
		0, 1, 0, 0,
		0, 1, 0, 0,
		0, 0, 0, 0,
		1, 0, 1, 0,  
		0, 0, 0, 0, // 1 sec
		1, 1, 0, 0,   
		0, 0, 0, 0,
		0, 1, 1, 0,  
		0, 0, 0, 0, // 2 sec
		0, 1, 0, 0, 
		0, 0, 0, 0,
		0, 1, 0, 0, //// 5 sec NOPE
		0, 0, 0, 0,
		0, 0, 0, 1, // 3 sec  
		0, 0, 0, 0,
		0, 0, 0, 1,  
		0, 0, 0, 0,
		1, 0, 1, 0, // 4 sec + Note that this is also the beat when player hits first fast hot-mode step!
		0, 0, 0, 0,
		0, 0, 1, 0,  
		0, 0, 0, 0, 
		0, 0, 0, 1,
		0, 0, 0, 0,  
		0, 1, 1, 0,
		0, 0, 0, 0,  
		1, 1, 0, 0,
		0, 0, 0, 0,  
		0, 1, 1, 0,
		0, 0, 0, 0,  
		1, 0, 0, 0,
		0, 1, 0, 0,
		0, 0, 1, 0,
		0, 0, 0, 0, // 2. bar 
		0, 0, 0, 1,
		0, 0, 0, 0,  
		1, 0, 0, 0,
		0, 1, 0, 0,  
		0, 0, 1, 0,
		0, 0, 0, 0,  
		0, 1, 0, 0,
		0, 0, 0, 0,  
		0, 1, 0, 0,
		0, 0, 0, 0,  
		1, 0, 1, 0,
		0, 0, 0, 0, 
		0, 0, 1, 0,
		0, 0, 0, 0,  
		0, 1, 0, 0,
		0, 0, 0, 0, // 3. bar
		0, 1, 0, 0,
		0, 0, 0, 0, 
		0, 0, 0, 1,
		0, 0, 0, 0,   
		0, 1, 0, 0,
		0, 0, 0, 0,  
		0, 0, 1, 0,
		0, 0, 0, 0, 
		1, 0, 1, 0,
		0, 0, 0, 0,  
		0, 1, 0, 0,
		0, 0, 0, 0, 
		1, 1, 0, 0,
		0, 0, 0, 0,  
		0, 1, 1, 0,
		0, 0, 0, 0, // 4. bar 
		0, 0, 1, 0,
		0, 1, 0, 0,  
		1, 0, 0, 0,
		0, 0, 0, 0,  
		0, 1, 0, 0,
		0, 0, 0, 0,
		1, 0, 1, 0,
		0, 0, 0, 0, 
		0, 0, 0, 1,
		0, 1, 0, 0,  
		0, 0, 0, 0,
		1, 0, 1, 0,  
		0, 0, 0, 0,
		1, 0, 1, 0,  
		0, 0, 0, 0,
		0, 1, 0, 0,  // 5. bar:: We are in the half way!
		0, 0, 0, 0,
		1, 1, 0, 0,  
		0, 0, 0, 0,
		0, 1, 1, 0, 
		0, 0, 0, 0,
		0, 0, 0, 1,  
		0, 0, 0, 0,
		0, 1, 0, 0,  
		1, 0, 0, 0,
		0, 0, 1, 0,  
		0, 0, 0, 0,
		0, 1, 0, 0,  
		0, 0, 0, 0,
		0, 1, 0, 0,
		1, 0, 1, 0,
		0, 0, 0, 0, // 6. bar 
		0, 0, 0, 1,
		0, 0, 0, 0,  
		0, 1, 0, 0,
		0, 0, 0, 0,  
		0, 0, 0, 1,
		0, 0, 0, 0,  
		0, 1, 0, 0,
		0, 0, 0, 0,  
		1, 0, 1, 0,
		0, 0, 0, 0,  
		0, 1, 0, 0,
		0, 0, 0, 0, 
		1, 0, 1, 0,
		0, 0, 0, 0,  
		0, 0, 0, 0,
		0, 1, 1, 0, // 7. bar
		0, 0, 0, 0,
		1, 1, 0, 0, 
		0, 0, 0, 0,
		0, 0, 0, 1,   
		0, 0, 0, 0,
		0, 1, 0, 0,  
		0, 1, 0, 0,
		0, 0, 0, 0, 
		1, 0, 1, 0,
		0, 0, 0, 0,  
		0, 1, 0, 0,
		0, 0, 0, 0, 
		0, 0, 0, 1,
		0, 0, 0, 0,  
		0, 1, 1, 0,
		1, 0, 0, 0,  // 8. bar as this step has landed 4 seconds later the hot mode is through!			
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0, // these zero lines are for make a gaping hole before new normal mode blocks.
	};
}

